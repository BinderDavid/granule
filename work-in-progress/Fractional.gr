import Parallel
import Vec
import Nat

data Colour = Colour (Int, (Int, Int))

example' : *Colour -> (Colour, Colour)
example' scarlet = let [s] : (Colour [0..2]) = share scarlet in
                   let x = s in
                   let y = s in (x, y)

observe : forall {p : Permission, f : p} . & f Colour -> & f Colour
observe x = x -- placeholder for the sake of example

persimmon : *Colour -> *Colour
persimmon c =
  withBorrow (\b -> let (x, y) = split b;
                         x' = observe x;
                         f = join (x', y) in f) c

mutate : & 1 Colour -> & 1 Colour
mutate x = x -- placeholder for the sake of example

viridian : *Colour -> *Colour
viridian c =
    withBorrow mutate c

transform : & 1 Int -> & 1 Int
transform x = x -- placeholder for the sake of example

indigo : *(Int, (Int, Int)) -> *(Int, (Int, Int))
indigo c =
    let (r, p) = uniquePush c;
        r' = withBorrow transform r
        in uniquePull (r', p)

-- would be much neater if we could derive push and pull for Colour
indigo' : *(Int, (Int, Int)) -> *(Int, (Int, Int))
indigo' c =
    let (r, p) = uniquePush c;
        (g, b) = uniquePush p;
        (r', b') = par (\() -> withBorrow transform r) (\() -> withBorrow transform b);
        p' = uniquePull (g, b') in uniquePull (r', p')

amethyst : *Colour -> *Colour
amethyst c =
    withBorrow (\b -> let (x, y) = split b;
                          (l, r) = split x;
                          x' = join (l, r);
                          f = join (x', y) in f) c

test : & 2/4 Colour -> & 1/2 Colour
test x = x

arrToRefs : *FloatArray -> exists {n : Nat} . Vec n (*(Ref Float))
arrToRefs arr = let ([l], arr') = lengthFloatArray arr in loopAR arr' [l] [0]

refsToArr : forall {n : Nat} . Vec n (*(Ref Float)) -> *FloatArray
refsToArr Nil = newFloatArray 0;
refsToArr vec = let (l, vec') = length' vec in loopRA (newFloatArray (natToInt l)) vec' [0]

loopAR : *FloatArray -> !Int -> !Int -> exists {n : Nat} . Vec n (*(Ref Float))
loopAR arr [l] [c] = if (c == l) then let () = deleteFloatArray arr in
        (pack <0 , Nil> as exists {n : Nat} . Vec n (*(Ref Float)))
    else let (v, arr') = readFloatArray arr c in
        (unpack <n , vec> = loopAR arr' [l] [c+1] in (pack <(n+1) , (Cons (newRef v) vec)> as exists {n : Nat} . Vec n (*(Ref Float))))

loopRA : forall {n : Nat} . *FloatArray -> Vec n (*(Ref Float)) -> !Int -> *FloatArray
loopRA arr Nil [_] = arr;
loopRA arr (Cons v vec) [c] = let arr' = writeFloatArray arr c (freezeRef v) in loopRA arr' vec [c+1]
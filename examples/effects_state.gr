-- Example of using algebraic effects and handlers in Granule to capture
-- state effects

-- Uses the builtin `call` and `handle` operations.
-- See https://granule-project.github.io/docs/modules/Primitives.html#algebraiceffectsandhandlers

import State

-- # State operations

data Labels = Get | Put

-- Operations
data StateOps (s : Type) : (Set Labels) -> Type -> Type where
 GetOp : forall {r : Type} . ()         -> (s  -> r) [1] -> StateOps s {Get} r;
 PutOp : forall {r : Type} . s [0..Inf] -> (() -> r) [1] -> StateOps s {Put} r

 -- Functoriality of operations
fmap_stateops : forall {s a b : Type, l : Set Labels}
              . (a -> b) [0..Inf] -> StateOps s l a -> StateOps s l b
fmap_stateops [f] (GetOp () [k]) = GetOp () [f . k];
fmap_stateops [f] (PutOp [s] [k]) = PutOp [s] [f . k]

-- Handler to state monad
stateHandler : forall {s r : Type, l : Set Labels}
             . StateOps s l (State s r) -> State s r
stateHandler (GetOp () [k]) = join_state (State (\([s] : s [0..Inf]) -> (k s, [s])));
stateHandler (PutOp s [k])  = join_state (State (\([_] : s [0..Inf]) -> (k (), s)))

-- # Examples

incr : Int <Eff (Set Labels) (StateOps Int) {Get, Put}>
incr = let
  y   <- call GetOp ();
  [z] <- pure (moveInt y);
  ()  <- call PutOp [z + 1] in
  pure z

-- Handle state wrapped
handleState : forall {a b : Type, e : Set Labels, s : Type}
            . a <Eff (Set Labels) (StateOps s) e>
           -> State s a
handleState = handle [/\{a,b,l}.fmap_stateops] [/\{l}.stateHandler] (return_state)

main : (Int, Int [])
main = runState (handleState incr) [42]